BaseMaterial <editable=false var_prefix=var texture_prefix=tex>
{
	State blend_mode <items=[alpha, additive] internal=true>
	Texture2D brush_texture <internal=true>
	Texture2D brush_mask <internal=true>
	Float brush_angle <internal=true>
	Float brush_opacity <internal=true>
	Float brush_height <internal=true>
	Float brush_height_scale <internal=true>

	Pass landscape_height_brush
	{
		Fragment=
		#{
			#include <core/materials/shaders/render/common.h>
			
			STRUCT_FRAG_BEGIN
			STRUCT_FRAG_END
			
			INIT_RW_TEXTURE_R32F (0, RW_TEX_HEIGHT)
			
			MAIN_FRAG_BEGIN(FRAGMENT_IN)
				
				float2 uv = float2(IN_UV.x, 1.0f - IN_UV.y);
				float2 brush_uv = rotateUV(uv, var_brush_angle);
				if(checkUV(brush_uv))
					discard;
				
				
				float height = max3(TEXTURE(tex_brush_texture, IN_UV).xyz) * var_brush_height_scale + var_brush_height;
				float alpha = TEXTURE(tex_brush_mask, brush_uv).w * var_brush_opacity;
				
				int2 landspace_height_coord = toInt2(IN_POSITION.xy);
				float landspace_height = TEXTURE_RW_LOAD_R32F(RW_TEX_HEIGHT, landspace_height_coord);
				float landspace_alpha = 1.0f;
				
				#ifdef STATE_BLEND_MODE_ALPHA
					float new_height = (height * alpha + landspace_height * landspace_alpha * (1.0f - alpha))
						/ (alpha + landspace_alpha * (1.0f - alpha));
				#else
					float new_height = landspace_height + height * alpha;
				#endif
				
				TEXTURE_RW_STORE_R32F(RW_TEX_HEIGHT, landspace_height_coord, new_height);
				
			MAIN_FRAG_END
		#}
	}
}