BaseMaterial <var_prefix=var texture_prefix=tex node=none hidden=1>
{
	Pass post
	{
		Compute=
		#{
			#include <core/materials/shaders/render/common.h>

			struct DXT1Block {
				uint colors;
				uint color_indices;
			};

			// Unordered access buffers
			INIT_RW_STRUCTURED_BUFFER(0,DXT1Block,dxt_image)

			// Source image
			INIT_TEXTURE(0,TEX_SOURCE)

			void fetch_block(const in uint2 thread_position,inout uint3 block[16])
			{
				unroll for(uint i = 0; i < 4; i++)
				{
					unroll for(uint j = 0; j < 4; j++)
					{
						float4 source_block = TEXTURE_FETCH_LOD(TEX_SOURCE,uint2(thread_position.x * 4 + i,thread_position.y * 4 + j),0);
						block[j * 4 + i] = uint3(source_block.xyz * 255.0f);
					}
				}
			}

			uint color_distance(const in uint3 color0, const in uint3 color1)
			{
				STATICVAR uint3 weights = uint3(30, 59, 11);
				float3 color_diferrence = float3(color0) - float3(color1);
				color_diferrence *= color_diferrence;
				return uint(color_diferrence.r * weights.x + color_diferrence.g * weights.y + color_diferrence.b * weights.z);
			}

			uint compress_color_5(const in uint color)
			{
				return uint(float(color) * (31.0f / 255.0f) + 0.5f);
			}

			uint compress_color_6(const in uint color)
			{
				return uint(float(color) * (63.0f / 255.0f) + 0.5f);
			}

			uint decompress_color_5(const in uint color)
			{
				return color * 255 / 31;
			}

			uint decompress_color_6(const in uint color)
			{
				return color * 255 / 63;
			}

			uint compress_colors565(const in uint c0, const in uint c1)
			{
				return c0 | c1 << 16;
			}

			void dxt1_compress_colors888(const in uint3 colors[2],inout uint c0,inout uint c1)
			{
				// combine colors
				c0 = ( ( compress_color_5(colors[0].x) ) << 11 ) | ( ( compress_color_6(colors[0].y) ) << 5 ) | ( compress_color_5(colors[0].z) );
				c1 = ( ( compress_color_5(colors[1].x) ) << 11 ) | ( ( compress_color_6(colors[1].y) ) << 5 ) | ( compress_color_5(colors[1].z) );
			}

			void dxt1_decompress_colors888_interpolated(const in uint c0, const in uint c1, inout uint3 colors[4])
			{
				colors[0].x = decompress_color_5((c0 & 0xf800) >> 11);
				colors[0].y = decompress_color_6((c0 & 0x07e0) >>  5);
				colors[0].z = decompress_color_5((c0 & 0x001f) >>  0);
				colors[1].x = decompress_color_5((c1 & 0xf800) >> 11);
				colors[1].y = decompress_color_6((c1 & 0x07e0) >>  5);
				colors[1].z = decompress_color_5((c1 & 0x001f) >>  0);
				colors[2] = (colors[0] * 2 + colors[1]) / 3;
				colors[3] = (colors[0] + colors[1] * 2) / 3;
			}

			// Bounding box method
			void dxt1_get_end_points_colors(const in uint3 block[16], inout uint3 colors[2])
			{

				colors[0] = uint3(255,255,255);
				colors[1] = uint3(0,0,0);

				unroll for(uint i = 0; i < 16; i++ )
				{
					colors[0] = min(block[i],colors[0]);
					colors[1] = max(block[i],colors[1]);
				}

				uint3 inset = ( colors[1] - colors[0] ) >> 4;

				colors[0].x = ( colors[0].x + inset.x <= 255 ) ? colors[0].x + inset.x : 255;
				colors[0].y = ( colors[0].y + inset.y <= 255 ) ? colors[0].y + inset.y : 255;
				colors[0].z = ( colors[0].z + inset.z <= 255 ) ? colors[0].z + inset.z : 255;
				colors[1].x = ( colors[1].x >= inset.x ) ? colors[1].x - inset.x : 0;
				colors[1].y = ( colors[1].y >= inset.y ) ? colors[1].y - inset.y : 0;
				colors[1].z = ( colors[1].z >= inset.z ) ? colors[1].z - inset.z : 0;
			}

			uint dxt1_setup_indices(const in uint3 block[16], const in uint c0, const in uint c1)
			{
				uint indices[16];
				uint3 colors[4];

				dxt1_decompress_colors888_interpolated(c0, c1, colors);

				for(uint i = 0; i < 16; i++)
				{
					uint min_distance = INT_MAX;

					for(uint j = 0; j < 4; j++)
					{
						uint distance = color_distance(block[i],colors[j]);

						// avoid if
						if(distance < min_distance)
							indices[i] = j;

						min_distance = min(min_distance,distance);
					}
				}

				uint result = 0;
				for(uint i = 0; i < 16; i++)
					result |= ( indices[i] << ( i << 1 ) );

				return result;
			}


			void compress_dxt1_block(const in uint3 block[16], out uint colors, out uint indices)
			{
				uint3 end_points_colors[2];
				end_points_colors[0] = uint3(0,0,0);
				end_points_colors[1] = uint3(0,0,0);

				/* Find end points
				 */
				dxt1_get_end_points_colors(block,end_points_colors);

				/* Store DXT block
				 */
				uint c0, c1;
				dxt1_compress_colors888(end_points_colors, c0, c1);

				if(c0 < c1)
				{
					uint swap = c0;
					c0 = c1;
					c1 = swap;
				}

				indices = dxt1_setup_indices(block, c0, c1);
				colors = compress_colors565(c0, c1);
			}

			// Set 256 (8*8) threads in one group
			MAIN_COMPUTE_BEGIN(8,8,1)

				uint thread_x = GROUP_ID.x * 8 + GROUP_THREAD_ID.x;
				uint thread_y = GROUP_ID.y * 8 + GROUP_THREAD_ID.y;

				uint block_id = thread_y * textureResolution(TEX_SOURCE).x / 4 + thread_x;

				// Input data
				uint3 block[16];
				fetch_block(uint2(thread_x,thread_y), block);

				uint colors = 0;
				uint color_indices = 0;

				compress_dxt1_block(block, colors, color_indices);

				dxt_image[block_id].colors = colors;
				dxt_image[block_id].color_indices = color_indices;

			MAIN_COMPUTE_END

		#}
	}
}
