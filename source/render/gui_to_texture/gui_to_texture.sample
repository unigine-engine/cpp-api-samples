<?xml version='1.0' encoding='utf-8'?>
<sample title="Gui to Texture">
	<sdk_desc>Rendering GUI elements into a texture using <i>Gui::render()</i> and applying the resulting texture to materials.</sdk_desc>
	<desc>
		<brief>This sample demonstrates how to render GUI elements into a texture using <ui><link to="gui_class" offset="render_void">Gui::render()</link></ui>. Instead of drawing directly to the screen, the GUI is redirected to a custom framebuffer, which isolates its rendering pipeline and allows the resulting texture to be applied to materials.</brief>
		<para>The <strong nt="1">GuiToTexture</strong> component supports two update modes:</para>
		<ul>
			<li>In <strong>Manual</strong> mode, the texture is updated only when explicitly calling <ui>renderToTexture()</ui>. This is used in the <strong nt="1">WidgetClock</strong> example, where the GUI (a digital clock) is re-rendered once per second, only when the displayed time changes.</li>
			<li><strong>Automatic</strong> mode is enabled by default and updates the GUI texture every frame. This is demonstrated in the <strong nt="1">WidgetNoSignal</strong> example, where a <ui>"No Signal"</ui> label moves across the screen like a screensaver. Because the position of the widget changes every frame, the texture must be continuously updated to reflect those changes.</li>
		</ul>
		<para>The render flow involves saving and clearing the current render state, binding a texture, configuring the viewport, rendering the GUI widgets, and restoring the render state. Mipmaps are also generated to ensure proper filtering at different scales and distances.</para>
		<para>You can use this sample to display dynamic GUI elements on in-game monitors, control panels, or other similar surfaces.</para>
	</desc>
	<tags>
		<tag>Render</tag>
		<tag>Materials</tag>
	</tags>
</sample>