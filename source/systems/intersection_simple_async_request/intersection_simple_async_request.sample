<?xml version="1.0" encoding="utf-8"?>
<sample title="Simple Async Request">
	<desc>
		<brief>This sample demonstrates how to perform a single asynchronous intersection query based on the user's mouse cursor position in the scene. The result includes the hit point and surface normal, which are visualized in the scene, along with latency information.</brief>
		<para>The sample demonstrates detection of intersections with all objects in the world using a combination of <ui><link to="world_class" offset="getIntersection_Vec3_Vec3_int_Object">World::getIntersection()</link></ui> and <ui><link to="object_class" offset="getIntersection_Vec3_Vec3_ObjectIntersectionTexCoord_int_int">Landscape::getIntersection()</link></ui> methods. A single ray is cast from the current camera position through the mouse cursor. If the ray intersects with any geometry, the hit point and surface normal are rendered using <ui><link to="visualizer_class">Visualizer</link></ui>. Intersection queries are handled asynchronously. A callback processes the result and records latency in frames. The average and maximum latency values are updated in real time and shown in the sample <ui>UI</ui>.</para>
		<para>This setup demonstrates how to implement non-blocking intersection queries suitable for object selection or similar real-time input-driven interactions.</para>
	</desc>
	<tags>
		<tag>Intersections</tag>
	</tags>
</sample>