<?xml version="1.0" encoding="utf-8"?>
<sample title="Object Frame">
	<sdk_desc>Using the <i>WidgetCanvas</i> class to render custom frames around objects in the viewport and save frame metadata as <i>JSON</i>.</sdk_desc>
	<desc>
		<brief>
			<para>This sample shows how to dynamically create and display rectangular frames around objects in the scene using the <ui><link to="widgetcanvas_class">WidgetCanvas</link></ui>. These frames include object labels and appear only if the object is visible and is located within a certain distance from the camera.</para>
			<para>You can also take screenshots via the <ui>Snap Screenshot</ui> button. The captured image does not include the rendered frames, but all frame metadata (including object <ui>ID</ui>, name, transform, and screen coordinates of the frame) is saved to a separate <ui>JSON</ui> file.</para>
		</brief>
		<para>The bounding box of each object is computed recursively based on all its mesh components. The resulting rectangle is projected onto the screen space and checked for visibility. If visible and not occluded, a <ui>2D</ui> frame is drawn using <ui><link to="widgetcanvas_class">WidgetCanvas</link></ui> class.</para>
		<para>All metadata, such as object <ui>ID</ui>, name, world-space position and rotation, as well as screen-space rectangle coordinates, is collected and saved as a structured <ui>JSON</ui> document using the <ui><link to="json_class">Json</link> class</ui>.</para>
		<para>This approach is useful for creating visual overlays, annotations, or <ui>UI</ui> debug elements where object-specific data must be highlighted or preserved externally.</para>
	</desc>
	<tags>
		<tag>Interface (GUI)</tag>
		<tag>Widgets</tag>
		<tag>File Formats</tag>
	</tags>
</sample>
